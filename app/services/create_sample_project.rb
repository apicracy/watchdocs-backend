class CreateSampleProject
  attr_reader :user, :project

  def initialize(user)
    @user = user
  end

  def call
    return unless sample_project_needed?
    ActiveRecord::Base.transaction do
      create_sample_project
      create_login_group
      create_document_group
      create_project_group
    end
  end

  private

  def create_sample_project
    @project = Fabricate(:project, user: user, sample: true, name: 'Sample Project')
  end

  def create_login_group
    login_group = Fabricate(:group, project: project, name: 'Authorization', description: 'Set of endpoints used for JWT based application across an app')
    login_endpoint = Fabricate(:endpoint, project: project, group: login_group, url: "/login", http_method: "POST", status: "up_to_date", title: "Login", summary: "This endpoint return JWT token as an Authorization header when correct credentials are supplied.")
    login_endpoint.request.update(status: "up_to_date", body: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["user"], "properties"=>{"user"=>{"type"=>"object", "required"=>["email", "password"], "properties"=>{"email"=>{"type"=>"string"}, "password"=>{"type"=>"string"}}}}}, body_draft: nil)
    Fabricate(:response, endpoint:login_endpoint, http_status_code: 200, status: "up_to_date", body: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["created_at", "email", "id", "updated_at"], "properties"=>{"id"=>{"type"=>"number"}, "email"=>{"type"=>"string"}, "created_at"=>{"type"=>"string"}, "updated_at"=>{"type"=>"string"}}}, body_draft: nil)

    users_me_endpoint = Fabricate(:endpoint, project: project, group: login_group, url: "/api/v1/users/me", http_method: "GET", status: "up_to_date", title: "User info", summary: "Returns an info about currently logged user. This can be used for login forms, and JWT validness monitoring.")
    users_me_endpoint.request.update(status: "up_to_date", body: nil, body_draft: nil)
    Fabricate(:response, endpoint:users_me_endpoint, http_status_code: 200, status: "up_to_date", body: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["created_at", "email", "id", "updated_at"], "properties"=>{"id"=>{"type"=>"number"}, "email"=>{"type"=>"string"}, "created_at"=>{"type"=>"string"}, "updated_at"=>{"type"=>"string"}}}, body_draft: nil)
  end

  def create_document_group
    document_group = Fabricate(:group, project: project, name: 'Documents', description: 'Set of endpoints for Document resource management')

    create_document_endpoint = Fabricate(:endpoint, project: project, group: document_group, url: "/api/v1/documents", http_method: "POST", status: "outdated", title: "Create document", summary: "Creates new Document entry")
    create_document_endpoint.request.update(status: "up_to_date", body: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["name", "project_id"], "properties"=>{"name"=>{"type"=>"string"}, "project_id"=>{"type"=>"string"}}}, body_draft: nil)
    Fabricate(:response, endpoint: create_document_endpoint, http_status_code: 403, status: "up_to_date", body: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["errors"], "properties"=>{"errors"=>{"type"=>"array", "items"=>{"type"=>"object", "required"=>["code", "detail", "status", "title"], "properties"=>{"code"=>{"type"=>"string"}, "title"=>{"type"=>"string"}, "detail"=>{"type"=>"string"}, "status"=>{"type"=>"string"}}}}}}, body_draft: nil)
    Fabricate(:response, endpoint: create_document_endpoint, http_status_code: 200, status: "outdated", body: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["group_id", "id", "name", "project_id", "text"], "properties"=>{"id"=>{"type"=>"number"}, "name"=>{"type"=>"string"}, "text"=>{"type"=>"string"}, "group_id"=>{"type"=>"number"}, "project_id"=>{"type"=>"number"}}}, body_draft: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["created_at", "group_id", "id", "name", "project_id", "text", "updated_at"], "properties"=>{"id"=>{"type"=>"number"}, "name"=>{"type"=>"string"}, "text"=>{"type"=>"string"}, "group_id"=>{"type"=>"string"}, "created_at"=>{"type"=>"string"}, "project_id"=>{"type"=>"number"}, "updated_at"=>{"type"=>"string"}}})
    Fabricate(:response, endpoint: create_document_endpoint, http_status_code: 400, status: "up_to_date", body: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["errors"], "properties"=>{"errors"=>{"type"=>"array", "items"=>{"type"=>"object", "required"=>["code", "detail", "status", "title"], "properties"=>{"code"=>{"type"=>"string"}, "title"=>{"type"=>"string"}, "detail"=>{"type"=>"object", "required"=>["name"], "properties"=>{"name"=>{"type"=>"array", "items"=>{"type"=>"string"}}}}, "status"=>{"type"=>"string"}}}}}}, body_draft: nil)

    update_document_endpoint = Fabricate(:endpoint, project: project, group: document_group, url: "/api/v1/documents/:id", http_method: "PUT", status: "outdated", title: "Update document", summary: "Updates Document entry")
    update_document_endpoint.request.update(status: "up_to_date", body: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["name", "project_id", "text"], "properties"=>{"name"=>{"type"=>"string"}, "text"=>{"type"=>"string"}, "project_id"=>{"type"=>"string"}}}, body_draft: nil)
    Fabricate(:response, endpoint: update_document_endpoint, http_status_code: 404, status: "up_to_date", body: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["errors"], "properties"=>{"errors"=>{"type"=>"array", "items"=>{"type"=>"object", "required"=>["code", "detail", "status", "title"], "properties"=>{"code"=>{"type"=>"string"}, "title"=>{"type"=>"string"}, "detail"=>{"type"=>"string"}, "status"=>{"type"=>"string"}}}}}}, body_draft: nil)
    Fabricate(:response, endpoint: update_document_endpoint, http_status_code: 403, status: "up_to_date", body: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["errors"], "properties"=>{"errors"=>{"type"=>"array", "items"=>{"type"=>"object", "required"=>["code", "detail", "status", "title"], "properties"=>{"code"=>{"type"=>"string"}, "title"=>{"type"=>"string"}, "detail"=>{"type"=>"string"}, "status"=>{"type"=>"string"}}}}}}, body_draft: nil)
    Fabricate(:response, endpoint: update_document_endpoint, http_status_code: 200, status: "outdated", body: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["created_at", "group_id", "id", "name", "project_id", "text", "updated_at"], "properties"=>{"id"=>{"type"=>"number"}, "name"=>{"type"=>"string"}, "text"=>{"type"=>"string"}, "group_id"=>{"type"=>"number"}, "created_at"=>{"type"=>"string"}, "project_id"=>{"type"=>"number"}, "updated_at"=>{"type"=>"string"}}}, body_draft: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["created_at", "group_id", "id", "name", "project_id", "text", "updated_at"], "properties"=>{"id"=>{"type"=>"number"}, "name"=>{"type"=>"string"}, "text"=>{"type"=>"string"}, "group_id"=>{"type"=>"string"}, "created_at"=>{"type"=>"string"}, "project_id"=>{"type"=>"number"}, "updated_at"=>{"type"=>"string"}}})
    Fabricate(:response, endpoint: update_document_endpoint, http_status_code: 400, status: "up_to_date", body: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["errors"], "properties"=>{"errors"=>{"type"=>"array", "items"=>{"type"=>"object", "required"=>["code", "detail", "status", "title"], "properties"=>{"code"=>{"type"=>"string"}, "title"=>{"type"=>"string"}, "detail"=>{"type"=>"object", "required"=>["name"], "properties"=>{"name"=>{"type"=>"array", "items"=>{"type"=>"string"}}}}, "status"=>{"type"=>"string"}}}}}}, body_draft: nil)

    delete_document_endpoint = Fabricate(:endpoint, project: project, group: document_group,  url: "/api/v1/documents/:id", http_method: "DELETE", status: "outdated", title: "Remove document", summary: "Removes Document entry")
    Fabricate(:response, endpoint: delete_document_endpoint, http_status_code: 403, status: "outdated", body: {"type"=>"object", "$schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["errors"], "properties"=>{"errors"=>{"type"=>"array", "items"=>{"type"=>"object", "required"=>["code", "detail", "tatus"], "properties"=>{"code"=>{"type"=>"string"}, "tatus"=>{"type"=>"string"}, "title"=>{"type"=>"string"}, "detail"=>{"type"=>"string"}}}}}}, body_draft: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["errors"], "properties"=>{"errors"=>{"type"=>"array", "items"=>{"type"=>"object", "required"=>["code", "detail", "status", "title"], "properties"=>{"code"=>{"type"=>"string"}, "title"=>{"type"=>"string"}, "detail"=>{"type"=>"string"}, "status"=>{"type"=>"string"}}}}}})
    Fabricate(:response, endpoint: delete_document_endpoint, http_status_code: 200, status: "outdated", body: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["created_at", "group_id", "id", "name", "project_id", "text", "updated_at"], "properties"=>{"id"=>{"type"=>"number"}, "name"=>{"type"=>"string"}, "text"=>{"type"=>"string"}, "group_id"=>{"type"=>"integer"}, "created_at"=>{"type"=>"string"}, "project_id"=>{"type"=>"number"}, "updated_at"=>{"type"=>"string"}}}, body_draft: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["created_at", "group_id", "id", "name", "project_id", "text", "updated_at"], "properties"=>{"id"=>{"type"=>"number"}, "name"=>{"type"=>"string"}, "text"=>{"type"=>"string"}, "group_id"=>{"type"=>"string"}, "created_at"=>{"type"=>"string"}, "project_id"=>{"type"=>"number"}, "updated_at"=>{"type"=>"string"}}})
    Fabricate(:response, endpoint: delete_document_endpoint, http_status_code: 404, status: "up_to_date", body: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["errors"], "properties"=>{"errors"=>{"type"=>"array", "items"=>{"type"=>"object", "required"=>["code", "detail", "status", "title"], "properties"=>{"code"=>{"type"=>"string"}, "title"=>{"type"=>"string"}, "detail"=>{"type"=>"string"}, "status"=>{"type"=>"string"}}}}}}, body_draft: nil)
  end

  def create_project_group
    projects_group = Fabricate(:group, project: project, name: 'Projects', description: 'Set of endpoints used for Project resource management')

    create_project_endpoint = Fabricate(:endpoint, project: project, group: projects_group, url: "/api/v1/projects", http_method: "POST", status: "outdated", title: "Create project", summary: "Creates new Project entry")
    create_project_endpoint.request.update(status: "up_to_date", body: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["base_url", "name"], "properties"=>{"name"=>{"type"=>"string"}, "base_url"=>{"type"=>"string"}}}, body_draft: nil)
    Fabricate(:response, endpoint: create_project_endpoint, http_status_code: 400, status: "outdated", body: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["errors"], "properties"=>{"errors"=>{"type"=>"array", "items"=>{"type"=>"object", "required"=>["code", "detail", "status", "title"], "properties"=>{"code"=>{"type"=>"string"}, "title"=>{"type"=>"string"}, "detail"=>{"type"=>"object", "required"=>["app_id", "app_secret", "name"], "properties"=>{"name"=>{"type"=>"array", "items"=>{"type"=>"string"}}, "app_id"=>{"type"=>"array", "items"=>{"type"=>"string"}}, "app_secret"=>{"type"=>"array", "items"=>{"type"=>"string"}}}}, "status"=>{"type"=>"string"}}}}}}, body_draft: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["errors"], "properties"=>{"errors"=>{"type"=>"array", "items"=>{"type"=>"object", "required"=>["code", "detail", "status", "title"], "properties"=>{"code"=>{"type"=>"string"}, "title"=>{"type"=>"string"}, "detail"=>{"type"=>"object", "required"=>["name"], "properties"=>{"name"=>{"type"=>"array", "items"=>{"type"=>"string"}}}}, "status"=>{"type"=>"string"}}}}}})
    Fabricate(:response, endpoint: create_project_endpoint, http_status_code: 200, status: "outdated", body: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["app_id", "app_secret", "base_url", "id", "name", "updated_at"], "properties"=>{"id"=>{"type"=>"number"}, "name"=>{"type"=>"string"}, "app_id"=>{"type"=>"string"}, "base_url"=>{"type"=>"string"}, "app_secret"=>{"type"=>"string"}, "updated_at"=>{"type"=>"string"}}}, body_draft: {"type"=>"object", "schema"=>"http://json-schema.org/draft-04/schema#", "required"=>["app_id", "app_secret", "base_url", "id", "name", "updated_at"], "properties"=>{"id"=>{"type"=>"number"}, "name"=>{"type"=>"string"}, "app_id"=>{"type"=>"string"}, "sample"=>{"type"=>"string"}, "base_url"=>{"type"=>"string"}, "app_secret"=>{"type"=>"string"}, "updated_at"=>{"type"=>"string"}}})

    get_project_endpoint = Fabricate(:endpoint, project: project, group: projects_group, url: "/api/v1/projects", http_method: "GET", status: "outdated", title: "List projects", summary: "Returns list of all projects available for a signed in user")
    Fabricate(:response, endpoint: get_project_endpoint, http_status_code: 200, status: "outdated", body: {"type"=>"array", "items"=>{"type"=>"object", "required"=>["base_url", "id", "name", "updated_at"], "properties"=>{"id"=>{"type"=>"number"}, "name"=>{"type"=>"string"}, "app_id"=>{"type"=>"string"}, "base_url"=>{"type"=>"string"}, "app_secret"=>{"type"=>"string"}, "updated_at"=>{"type"=>"string"}}}, "schema"=>"http://json-schema.org/draft-04/schema#"}, body_draft: {"type"=>"array", "items"=>{"type"=>"object", "required"=>["app_id", "app_secret", "base_url", "id", "name", "updated_at"], "properties"=>{"id"=>{"type"=>"number"}, "name"=>{"type"=>"string"}, "app_id"=>{"type"=>"string"}, "base_url"=>{"type"=>"string"}, "app_secret"=>{"type"=>"string"}, "updated_at"=>{"type"=>"string"}}}, "schema"=>"http://json-schema.org/draft-04/schema#"})
    Fabricate(:url_param, endpoint: get_project_endpoint, name: "page", status: "up_to_date", required: false, data_type: nil, description: "Zero-indexed number of current page", example: "10", is_part_of_url: false, required_draft: nil)
    Fabricate(:url_param, endpoint: get_project_endpoint, name: "archived", status: "up_to_date", required: false, data_type: "string", description: "Display archived projects alongside ongoing ones", example: "true", is_part_of_url: false, required_draft: nil)
    Fabricate(:url_param, endpoint: get_project_endpoint, name: "per_page", status: "up_to_date", required: false, data_type: "number", description: "Set how many projects are you going to get with each page", example: "10", is_part_of_url: false, required_draft: nil)
  end

  def sample_project_needed?
    user.projects.count.positive? && user.projects.samples.blank?
  end
end
